pdf(file = paste(output_dir, "/in_silico_validation/figure_4a_bottom.pdf", sep = ""), width = 9, height = 6)
ggplot(pivot_longer(expected, cols = c('expected', 'actual')), aes(x = factor(name, levels = c('expected', 'actual')), y = value, fill = name)) +
geom_col(color = "black") +
scale_fill_manual(values = c("#f6c6ad","#005fbf")) +
ylim(c(0,1000)) +
labs(x = "", y = "") +
theme_minimal_hgrid() +
theme(legend.position = 'none') +
annotate(geom = 'text', label = '****', x = 2, y = 785, size = 15)
dev.off()
# Functional enrichment analysis ----
## Get entrez IDs for enrichKEGG
categories <- list(stable_enrich2, dynamic_enrich2)
names(categories) <- c("characteristic", "flexible")
## biomaRt
mart <- useDataset(dataset = "hsapiens_gene_ensembl", mart = useMart("ENSEMBL_MART_ENSEMBL"))
mart
## biomaRt
mart <- useDataset(dataset = "hsapiens_gene_ensembl", mart = useMart("ENSEMBL_MART_ENSEMBL"))
categories_entrez <- lapply(categories, function(x) {
getBM(attributes = c("external_gene_name","entrezgene_id"),
filters = "external_gene_name",
values = x,
mart = mart)
})
mart
categories_entrez <- lapply(categories, function(x) {
getBM(attributes = c("external_gene_name","entrezgene_id"),
filters = "external_gene_name",
values = x,
mart = mart)
})
categories_entrez
## Universe of entrez IDs
entrez_universe <- getBM(attributes = c("external_gene_name","entrezgene_id"),
filters = "external_gene_name",
values = symbols,
mart = mart)
## Universe of entrez IDs
entrez_universe <- getBM(attributes = c("external_gene_name","entrezgene_id"),
filters = "external_gene_name",
values = symbols,
mart = mart)
symbols
## Universe of entrez IDs
entrez_universe <- getBM(attributes = c("external_gene_name","entrezgene_id"),
filters = "external_gene_name",
values = symbols,
mart = mart)
nrow(entrez_universe)
entrez_universe
resultsGO <- list()
resultsKEGG <- list()
dir.create(paste(output_dir, "functional_enrichment", sep = ""))
for (i in 1:2) {
resGO <- enrichGO(categories[[i]],
OrgDb = org.Hs.eg.db,
keyType = "SYMBOL",
ont = "ALL",
universe = symbols,
pvalueCutoff = 1,
qvalueCutoff = 1,
pool = FALSE)
rdf <- as.data.frame(resGO)
rdf <- rdf[order(rdf$pvalue),]
resultsGO[[i]] <- rdf
write.csv(rdf, paste(output_dir, "functional_enrichment/",names(categories)[i],"_GO.csv", sep = ""))
resKEGG <- enrichKEGG(as.character(categories_entrez[[i]]$entrezgene_id),
keyType = "ncbi-geneid",
maxGSSize = 500,
pvalueCutoff = 1,
qvalueCutoff = 1,
universe = as.character(entrez_universe$entrezgene_id))
rkf <- as.data.frame(resKEGG)
rkf <- rkf[order(rkf$pvalue),]
resultsKEGG[[i]] <- rkf
write.csv(rkf, paste(output_dir, "functional_enrichment/",names(categories)[i],"_KEGG.csv", sep = ""))
}
library(cowplot)
go_bp <- list()
go_cc <- list()
go_mf <- list()
kegg <- list()
resultsGO[[1]]$passed <- 0
resultsGO[[1]]$passed <- resultsGO[[1]]$p.adjust < 0.05
resultsGO[[2]]$passed <- 0
resultsGO[[2]]$passed <- resultsGO[[2]]$p.adjust < 0.05
resultsKEGG[[1]]$passed <- 0
resultsKEGG[[1]]$passed <- resultsKEGG[[1]]$p.adjust < 0.05
resultsKEGG[[2]]$passed <- 0
resultsKEGG[[2]]$passed <- resultsKEGG[[2]]$p.adjust < 0.05
## Generate plots
colors <- list(sp = c("FALSE" = "#84cbeb", "TRUE" = "#005fbf"), fl = c("FALSE" = "#f6c6ad", "TRUE" = "#fba200"))
for (i in 1:2) {
lims <- c(0,max(max(-log10(resultsGO[[i]]$pvalue)),
max(-log10(resultsKEGG[[i]]$pvalue)))
)
## GO_BP
go_bp[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "BP"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title =  "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## GO_CC
go_cc[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "CC"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title =  "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## GO_MF
go_mf[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "MF"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title = "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## KEGG
kegg[[i]] <- ggplot(na.omit(head(resultsKEGG[[i]], 10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "-log10(p-value)", x = "",
title =  "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
}
## Stable-polymorphic function
a <- plot_grid(go_bp[[1]], go_cc[[1]], go_mf[[1]], kegg[[1]], ncol = 1, align = 'v')
## FLexible function
b <- plot_grid(go_bp[[2]], go_cc[[2]], go_mf[[2]], kegg[[2]], ncol = 1, align = 'v')
plot_grid(a, b, ncol = 2, nrow = 1, labels = c('A. Characteristic genes', 'B. Flexible genes'),
align = 'hv')
pdf(file = paste(output_dir, "functional_enrichment/functional_enrichment_figure.pdf", sep = ""), height = 12, width = 23)
plot_grid(a, b, ncol = 2, nrow = 1, labels = c('A. Characteristic genes', 'B. Flexible genes'),
align = 'hv')
dev.off()
## Flexible genes
resultsGO[[2]]$Description
## Flexible genes
grep("transferring groups other than amino−acyl group", resultsGO[[2]]$Description)
resultsGO[[2]]$Description
grep("transferring groups other than amino−acyl group", resultsGO[[2]]$Description)
## Flexible genes
grep("transferring groups other than amino−acyl group", resultsGO[[2]]$Description)
## Generate plots
colors <- list(sp = c("#84cbeb"), fl = c("#f6c6ad"))
## Flexible genes
grep("transferring groups", resultsGO[[2]]$Description)
resultsGO[[2]]$Description[30]
# "acyltransferase activity, transferring groups other than amino-acyl groups"
resultsGO[[2]]$Description[30] <- "acyltransferase activity*"
## Generate plots
colors <- list(sp = c("#84cbeb"), fl = c("#f6c6ad"))
for (i in 1:2) {
lims <- c(0,max(max(-log10(resultsGO[[i]]$pvalue)),
max(-log10(resultsKEGG[[i]]$pvalue)))
)
## GO_BP
go_bp[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "BP"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title =  "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## GO_CC
go_cc[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "CC"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title =  "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## GO_MF
go_mf[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "MF"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title = "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## KEGG
kegg[[i]] <- ggplot(na.omit(head(resultsKEGG[[i]], 10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "-log10(p-value)", x = "",
title =  "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
}
## Stable-polymorphic function
a <- plot_grid(go_bp[[1]], go_cc[[1]], go_mf[[1]], kegg[[1]], ncol = 1, align = 'v')
## FLexible function
b <- plot_grid(go_bp[[2]], go_cc[[2]], go_mf[[2]], kegg[[2]], ncol = 1, align = 'v')
pdf(file = paste(output_dir, "functional_enrichment/functional_enrichment_figure.pdf", sep = ""), height = 12, width = 23)
plot_grid(a, b, ncol = 2, nrow = 1, labels = c('A. Characteristic genes', 'B. Flexible genes'),
align = 'hv')
dev.off()
pdf(file = paste(output_dir, "functional_enrichment/functional_enrichment_figure.pdf", sep = ""), height = 12, width = 16)
plot_grid(a, b, ncol = 2, nrow = 1, labels = c('A. Characteristic genes', 'B. Flexible genes'),
align = 'hv')
dev.off()
pdf(file = paste(output_dir, "functional_enrichment/functional_enrichment_figure.pdf", sep = ""), height = 13, width = 16)
plot_grid(a, b, ncol = 2, nrow = 1, labels = c('A. Characteristic genes', 'B. Flexible genes'),
align = 'hv')
dev.off()
sp <- read.table(paste(output_dir, "characteristic_gene_list.txt", sep = ""))
fl <- read.table(paste(output_dir, "flexible_gene_list.txt", sep = ""))
sdf2 <- list(sp, fl)
names(sdf2) <- c("characteristic", "flexible")
dataset <- useDataset(dataset = 'hsapiens_gene_ensembl', mart = useMart('ENSEMBL_MART_ENSEMBL'))
gene_names <- c()
sdf2 <- lapply(sdf4, function(x) {
gene_names <- getBM(attributes = c('hgnc_symbol','description'),
filters = 'hgnc_symbol',
values = x[[1]],
mart = dataset)
x <- gene_names
})
length(stable_enrich2)
lapply(sdf2, head)
sdf2 <- lapply(sdf4, function(x) {
gene_names <- getBM(attributes = c('hgnc_symbol','description'),
filters = 'hgnc_symbol',
values = x[[1]],
mart = dataset)
x <- gene_names
})
sdf2 <- lapply(sdf2, function(x) {
gene_names <- getBM(attributes = c('hgnc_symbol','description'),
filters = 'hgnc_symbol',
values = x[[1]],
mart = dataset)
x <- gene_names
})
for (i in 1:2) {
lims <- c(0,max(max(-log10(resultsGO[[i]]$pvalue)),
max(-log10(resultsKEGG[[i]]$pvalue)))
)
## GO_BP
go_bp[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "BP"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title =  "GO Biological Process") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## GO_CC
go_cc[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "CC"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title =  "GO Cellular Compartment") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## GO_MF
go_mf[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "MF"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title = "GO Molecular Function") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## KEGG
kegg[[i]] <- ggplot(na.omit(head(resultsKEGG[[i]], 10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "-log10(p-value)", x = "KEGG Pathways",
title =  "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
}
## Stable-polymorphic function
a <- plot_grid(go_bp[[1]], go_cc[[1]], go_mf[[1]], kegg[[1]], ncol = 2, align = 'v')
## FLexible function
b <- plot_grid(go_bp[[2]], go_cc[[2]], go_mf[[2]], kegg[[2]], ncol = 2, align = 'v')
pdf(file = paste(output_dir, "functional_enrichment/functional_enrichment_figure.pdf", sep = ""), height = 13, width = 16)
plot_grid(a, b, ncol = 2, nrow = 1, labels = c('A. Characteristic genes', 'B. Flexible genes'),
align = 'hv')
dev.off()
pdf(file = paste(output_dir, "functional_enrichment/functional_enrichment_figure.pdf", sep = ""), height = 14, width = 24)
plot_grid(a, b, ncol = 2, nrow = 1, labels = c('A. Characteristic genes', 'B. Flexible genes'),
align = 'hv')
dev.off()
pdf(file = paste(output_dir, "functional_enrichment/functional_enrichment_figure_a.pdf", sep = ""), height = 12, width = 16)
a
dev.off()
pdf(file = paste(output_dir, "functional_enrichment/functional_enrichment_figure_a.pdf", sep = ""), height = 16, width = 16)
a
dev.off()
pdf(file = paste(output_dir, "functional_enrichment/functional_enrichment_figure_a.pdf", sep = ""), height = 12, width = 16)
a
dev.off()
pdf(file = paste(output_dir, "functional_enrichment/functional_enrichment_figure_a.pdf", sep = ""), height = 10, width = 20)
a
dev.off()
for (i in 1:2) {
lims <- c(0,max(max(-log10(resultsGO[[i]]$pvalue)),
max(-log10(resultsKEGG[[i]]$pvalue)))
)
## GO_BP
go_bp[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "BP"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title =  "GO Biological Process") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## GO_CC
go_cc[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "CC"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title =  "GO Cellular Compartment") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## GO_MF
go_mf[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "MF"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title = "GO Molecular Function") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## KEGG
kegg[[i]] <- ggplot(na.omit(head(resultsKEGG[[i]], 10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "-log10(p-value)", x = "",
title =  "KEGG Pathways") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
}
## Stable-polymorphic function
a <- plot_grid(go_bp[[1]], go_cc[[1]], go_mf[[1]], kegg[[1]], ncol = 2, align = 'v')
## FLexible function
b <- plot_grid(go_bp[[2]], go_cc[[2]], go_mf[[2]], kegg[[2]], ncol = 2, align = 'v')
pdf(file = paste(output_dir, "functional_enrichment/functional_enrichment_figure_a.pdf", sep = ""), height = 10, width = 20)
a
dev.off()
pdf(file = paste(output_dir, "functional_enrichment/figure4.pdf", sep = ""), height = 10, width = 20)
b
dev.off()
expected <- data.frame(expected = 150, actual = 107)
pdf(file = paste(output_dir, "/in_silico_validation/figure_4b_bottom.pdf", sep = ""), width = 9, height = 6)
ggplot(pivot_longer(expected, cols = c('expected', 'actual')), aes(x = factor(name, levels = c('expected', 'actual')), y = value, fill = name)) +
geom_col(color = "black") +
scale_fill_manual(values = c("#84cbeb","#fba200")) +
ylim(c(0,200)) +
labs(x = "", y = "") +
theme_minimal_hgrid() +
theme(legend.position = 'none') +
annotate(geom = 'text', label = '****', x = 2, y = 125, size = 15)
dev.off()
# [1] 7.407683e-23
venn.diagram(x = reverse(list(stable_enrich2, intersect(gtex$gene_name, symbols))),
category.names = c("Characteristic", "GTEx eGenes (q < 0.01)"),
fill = c("#84cbeb", "#005fbf"), col = "black", cex = 1.4, alpha = c(0.8,0.8),
main = "Previously identified GTEx eQTLs", imagetype = "png",
main.fontfamily = "Arial", main.fontface = "bold", fontfamily = "Arial",
cat.fontfamily = "Arial", cat.dist = c(0.035,-0.08), cat.pos = c(200,45), cat.cex = c(1.3, 1.2),
disable.logging = T, force.unique = T,
filename = paste(output_dir, "in_silico_validation/characteristic_GTEx_validation1.png", sep = ""))
# [1] 7.407683e-23
venn.diagram(x = list(intersect(gtex$gene_name, symbols), stable_enrich2),
category.names = c("Characteristic", "GTEx eGenes (q < 0.01)"),
fill = c("#005fbf","#84cbeb"), col = "black", cex = 1.4, alpha = c(0.8,0.8),
main = "Previously identified GTEx eQTLs", imagetype = "png",
main.fontfamily = "Arial", main.fontface = "bold", fontfamily = "Arial",
cat.fontfamily = "Arial", cat.dist = c(0.035,-0.08), cat.pos = c(200,45), cat.cex = c(1.3, 1.2),
disable.logging = T, force.unique = T,
filename = paste(output_dir, "in_silico_validation/characteristic_GTEx_validation1.png", sep = ""))
sp <- read.table(paste(output_dir, "characteristic_gene_list.txt", sep = ""))
fl <- read.table(paste(output_dir, "flexible_gene_list.txt", sep = ""))
sdf2 <- list(sp, fl)
names(sdf2) <- c("characteristic", "flexible")
dataset <- useDataset(dataset = 'hsapiens_gene_ensembl', mart = useMart('ENSEMBL_MART_ENSEMBL'))
sdf2
dataset
listDatasets(mart = mart = useMart('ENSEMBL_MART_ENSEMBL'))
listDatasets(mart = useMart('ENSEMBL_MART_ENSEMBL'))
dataset <- useDataset(dataset = 'hsapiens_gene_ensembl', mart = useMart('ENSEMBL_MART_ENSEMBL'))
sdf2
lapply(sdf2, head)
sdf2 <- list(sp, fl)
names(sdf2) <- c("characteristic", "flexible")
dataset <- useDataset(dataset = 'hsapiens_gene_ensembl', mart = useMart('ENSEMBL_MART_ENSEMBL'))
dataset
gene_names <- c()
sdf2 <- lapply(sdf2, function(x) {
gene_names <- getBM(attributes = c('hgnc_symbol','description'),
filters = 'hgnc_symbol',
values = x[[1]],
mart = dataset)
x <- gene_names
})
lapply(sdf2, head)
## First list
# $characteristic
# hgnc_symbol                                                                description
# 1        ABAT          4-aminobutyrate aminotransferase [Source:HGNC Symbol;Acc:HGNC:23]
# 2       ABCA1 ATP binding cassette subfamily A member 1 [Source:HGNC Symbol;Acc:HGNC:29]
# 3       ABCA2 ATP binding cassette subfamily A member 2 [Source:HGNC Symbol;Acc:HGNC:32]
# 4       ABCA5 ATP binding cassette subfamily A member 5 [Source:HGNC Symbol;Acc:HGNC:35]
# 5       ABCA7 ATP binding cassette subfamily A member 7 [Source:HGNC Symbol;Acc:HGNC:37]
# 6       ABCB1 ATP binding cassette subfamily B member 1 [Source:HGNC Symbol;Acc:HGNC:40]
writexl::write_xlsx(x = sdf2, path = paste(output_dir, "supplementary_data_2.xlsx", sep = ""))
setwd(input_dir)
setwd(output_dir)
# Supplementary data file 3 ----
cgo <- read.csv(paste(output_dir, "/functional_enrichment/characteristic_GO.csv"))
# Supplementary data file 3 ----
cgo <- read.csv(paste(output_dir, "/functional_enrichment/characteristic_GO.csv", sep = ""))
ckg <- read.csv(paste(output_dir, "/functional_enrichment/characteristic_KEGG.csv", sep = ""))
fgo <- read.csv(paste(output_dir, "/functional_enrichment/flexible_GO.csv", sep = ""))
fkg <- read.csv(paste(output_dir, "/functional_enrichment/flexible_KEGG.csv", sep = ""))
sdf3 <- list(cgo, ckg, fgo, fkg)
names(sdf3) <- c("Characteristic GO", "Characteristic KEGG", "Flexible GO", "Flexible KEGG")
writexl::write_xlsx(x = sdf3, path = paste(output_dir, "supplementary_data_3.xlsx", sep = ""))
colors <- list(sp = c("#84cbeb"), fl = c("#f6c6ad"))
for (i in 1:2) {
lims <- c(0,max(max(-log10(resultsGO[[i]]$pvalue)),
max(-log10(resultsKEGG[[i]]$pvalue)))
)
## GO_BP
go_bp[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "BP"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "-log10(p-value)", x = "",
title =  "GO Biological Process") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## GO_CC
go_cc[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "CC"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title =  "GO Cellular Compartment") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## GO_MF
go_mf[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "MF"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title = "GO Molecular Function") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## KEGG
kegg[[i]] <- ggplot(na.omit(head(resultsKEGG[[i]], 10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title =  "KEGG Pathways") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
}
## Stable-polymorphic function
a <- plot_grid(go_bp[[1]], go_cc[[1]], go_mf[[1]], kegg[[1]], ncol = 2, align = 'v')
## FLexible function
b <- plot_grid(go_bp[[2]], go_cc[[2]], go_mf[[2]], kegg[[2]], ncol = 2, align = 'v')
pdf(file = paste(output_dir, "functional_enrichment/figure3.pdf", sep = ""), height = 10, width = 20)
a
dev.off()
pdf(file = paste(output_dir, "functional_enrichment/figure4.pdf", sep = ""), height = 10, width = 20)
b
dev.off()
lintersect(gtex$gene_name, symbols)
