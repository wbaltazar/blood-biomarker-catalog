gtex <- read_tsv("~/Desktop/work_repo/data/GTEx_Analysis_v8_eQTL/Whole_Blood.v8.egenes.txt.gz")
gtex <- gtex %>%
dplyr::filter(qval < 0.01)
length(gtex$gene_name)
# [1] 10071
length(intersect(gtex$gene_name, symbols))
# [1] 5333
## lintersect
lintersect <- function(x,y) {
length(intersect(unique(x),unique(y)))
}
phyper(q = lintersect(stable_enrich2, gtex$gene_name) - 1,
m = lintersect(gtex$gene_name, symbols),
n = length(setdiff(symbols, gtex$gene_name)),
k = length(stable_enrich2),
lower.tail = F)
# [1] 5.497379e-32
venn.diagram(x = list(stable_enrich2, intersect(gtex$gene_name, symbols)),
category.names = c("Stable-polymorphic", "GTEx eGenes (q < 0.01)"),
fill = c("#84cbeb", "#00b7ec"), col = "black", cex = 1.4, alpha = c(0.8,0.8),
main = "Previously identified GTEx eQTLs", imagetype = "png",
main.fontfamily = "Arial", main.fontface = "bold", fontfamily = "Arial",
cat.fontfamily = "Arial", cat.dist = c(0.035,-0.08), cat.pos = c(200,45), cat.cex = c(1.3, 1.2),
disable.logging = T, force.unique = T,
filename = paste(output_dir, "in_silico_validation/stable_poly_GTEx_validation.png", sep = ""))
## Checking for under-enrichment ----
## Lower tail is true
## You can see expected values at https://systems.crump.ucla.edu/hypergeometric/index.php
## Stable-polymorphic with Eisenberg
phyper(q = lintersect(stable_enrich2, eisenberg$V1), #608, inclusive less than
m = lintersect(eisenberg$V1, symbols), #3175
n = length(setdiff(symbols, eisenberg$V1)), #6299
k = length(stable_enrich2), #2688
lower.tail = T)
lintersect(stable_enrich2, eisenberg$V1)
lintersect(eisenberg$V1, symbols)
length(setdiff(symbols, eisenberg$V1))
length(stable_enrich2)
# [1] 2.368478e-41, under-enriched
## Stable-polymorphic with De Boever
phyper(q = lintersect(stable_enrich2, deboever), #259
m = lintersect(deboever, symbols), #1019
n = length(setdiff(symbols, deboever)), #8455
k = length(stable_enrich2), #2688
lower.tail = T)
lintersect(stable_enrich2, deboever)
lintersect(deboever, symbols)
length(setdiff(symbols, deboever))
length(stable_enrich2)
# [1] 0.000100876
## Dynamic with GTEx
phyper(q = lintersect(dynamic_enrich2, gtex$gene_name), #545
m = lintersect(gtex$gene_name, symbols), #5333
n = length(setdiff(symbols, gtex$gene_name)), #4141
k = length(dynamic_enrich2), #1179
lower.tail = T)
lintersect(dynamic_enrich2, gtex$gene_name)
lintersect(gtex$gene_name, symbols)
length(setdiff(symbols, gtex$gene_name))
length(dynamic_enrich2)
# [1] 1.105556e-18
## Dynamic with Eisenberg
phyper(q = lintersect(dynamic_enrich2, eisenberg$V1), #440
m = lintersect(eisenberg$V1, symbols), #3175
n = length(setdiff(symbols, eisenberg$V1)), #6299
k = length(dynamic_enrich2), #1179
lower.tail = T)
lintersect(dynamic_enrich2, eisenberg$V1)
length(dynamic_enrich2)
lintersect(house_enrich2, gtex$gene_name)
length(house_enrich2)
lintersect(house_enrich2, deboever)
length(setdiff(symbols, deboever))
length(house_enrich2)
# [1] 1
## Housekeeping with GTEx
phyper(q = lintersect(house_enrich2, gtex$gene_name), #89
m = lintersect(gtex$gene_name, symbols), #5333
n = length(setdiff(symbols, gtex$gene_name)), #4141
k = length(house_enrich2), #188
lower.tail = T)
# [1] 0.007860481
## Housekeeping with De Boever
phyper(q = lintersect(house_enrich2, deboever), #26
m = lintersect(deboever, symbols), #1019
n = length(setdiff(symbols, deboever)), #8455
k = length(house_enrich2), #188
lower.tail = T)
# [1] 1.105556e-18
## Dynamic with Eisenberg
phyper(q = lintersect(dynamic_enrich2, eisenberg$V1), #656
m = lintersect(eisenberg$V1, symbols), #3175
n = length(setdiff(symbols, eisenberg$V1)), #6299
k = length(dynamic_enrich2), #1668
lower.tail = T)
# [1] 5.497379e-32
venn.diagram(x = list(stable_enrich2, intersect(gtex$gene_name, symbols)),
category.names = c("Stable-polymorphic", "GTEx eGenes (q < 0.01)"),
fill = c("#84cbeb", "blue3"), col = "black", cex = 1.4, alpha = c(0.8,0.8),
main = "Previously identified GTEx eQTLs", imagetype = "png",
main.fontfamily = "Arial", main.fontface = "bold", fontfamily = "Arial",
cat.fontfamily = "Arial", cat.dist = c(0.035,-0.08), cat.pos = c(200,45), cat.cex = c(1.3, 1.2),
disable.logging = T, force.unique = T,
filename = paste(output_dir, "in_silico_validation/stable_poly_GTEx_validation.png", sep = ""))
# [1] 5.497379e-32
venn.diagram(x = list(stable_enrich2, intersect(gtex$gene_name, symbols)),
category.names = c("Stable-polymorphic", "GTEx eGenes (q < 0.01)"),
fill = c("#84cbeb", "#005fbf"), col = "black", cex = 1.4, alpha = c(0.8,0.8),
main = "Previously identified GTEx eQTLs", imagetype = "png",
main.fontfamily = "Arial", main.fontface = "bold", fontfamily = "Arial",
cat.fontfamily = "Arial", cat.dist = c(0.035,-0.08), cat.pos = c(200,45), cat.cex = c(1.3, 1.2),
disable.logging = T, force.unique = T,
filename = paste(output_dir, "in_silico_validation/stable_poly_GTEx_validation.png", sep = ""))
categories <- list(stable_enrich2, dynamic_enrich2, house_enrich2)
names(categories) <- c("characteristic", "flexible", "housekeeping")
## biomaRt
mart <- useDataset(dataset = "hsapiens_gene_ensembl", mart = useMart("ENSEMBL_MART_ENSEMBL"))
categories_entrez <- lapply(categories, function(x) {
getBM(attributes = c("external_gene_name","entrezgene_id"),
filters = "external_gene_name",
values = x,
mart = mart)
})
## Universe of entrez IDs
entrez_universe <- getBM(attributes = c("external_gene_name","entrezgene_id"),
filters = "external_gene_name",
values = symbols,
mart = mart)
nrow(entrez_universe)
# [1] 9562
resultsGO <- list()
resultsKEGG <- list()
for (i in 1:3) {
resGO <- enrichGO(categories[[i]],
OrgDb = org.Hs.eg.db,
keyType = "SYMBOL",
ont = "ALL",
universe = symbols,
pvalueCutoff = 1,
qvalueCutoff = 1,
pool = FALSE)
rdf <- as.data.frame(resGO)
rdf <- rdf[order(rdf$pvalue),]
resultsGO[[i]] <- rdf
write.csv(rdf, paste(output_dir, "functional_enrichment/",names(categories)[i],"_GO.csv", sep = ""))
resKEGG <- enrichKEGG(as.character(categories_entrez[[i]]$entrezgene_id),
keyType = "ncbi-geneid",
maxGSSize = 500,
pvalueCutoff = 1,
qvalueCutoff = 1,
universe = as.character(entrez_universe$entrezgene_id))
rkf <- as.data.frame(resKEGG)
rkf <- rkf[order(rkf$pvalue),]
resultsKEGG[[i]] <- rkf
write.csv(rkf, paste(output_dir, "functional_enrichment/",names(categories)[i],"_KEGG.csv", sep = ""))
}
## Plot results ---
library(cowplot)
go_bp <- list()
go_cc <- list()
go_mf <- list()
kegg <- list()
resultsGO[[1]]$passed <- 0
resultsGO[[1]]$passed <- resultsGO[[1]]$p.adjust < 0.05
resultsGO[[2]]$passed <- 0
resultsGO[[2]]$passed <- resultsGO[[2]]$p.adjust < 0.05
resultsGO[[3]]$passed <- 0
resultsGO[[3]]$passed <- resultsGO[[3]]$p.adjust < 0.05
resultsKEGG[[1]]$passed <- 0
resultsKEGG[[1]]$passed <- resultsKEGG[[1]]$p.adjust < 0.05
resultsKEGG[[2]]$passed <- 0
resultsKEGG[[2]]$passed <- resultsKEGG[[2]]$p.adjust < 0.05
resultsKEGG[[3]]$passed <- 0
resultsKEGG[[3]]$passed <- resultsKEGG[[3]]$p.adjust < 0.05
## Generate plots
colors <- list(sp = c("FALSE" = "#afeeee", "TRUE" = "#00b7ec"), fl = c("FALSE" = "#c3fde0", "TRUE" = "#00a076"), ho = c("FALSE" = "#ffdfbf", "TRUE" = "#fba200"))
for (i in 1:3) {
lims <- c(0,max(max(-log10(resultsGO[[i]]$pvalue)),
max(-log10(resultsKEGG[[i]]$pvalue)))
)
## GO_BP
go_bp[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "BP"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title =  "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## GO_CC
go_cc[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "CC"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title =  "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## GO_MF
go_mf[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "MF"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title = "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## KEGG
kegg[[i]] <- ggplot(na.omit(head(resultsKEGG[[i]], 10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "-log10(p-value)", x = "",
title =  "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
}
## Stable-polymorphic function
a <- plot_grid(go_bp[[1]], go_cc[[1]], go_mf[[1]], kegg[[1]], ncol = 1, align = 'v')
## FLexible function
b <- plot_grid(go_bp[[2]], go_cc[[2]], go_mf[[2]], kegg[[2]], ncol = 1, align = 'v')
## Housekeeping function
c <- plot_grid(go_bp[[3]], go_cc[[3]], go_mf[[3]], kegg[[3]], ncol = 1, align = 'v')
pdf(file = paste(output_dir, "functional_enrichment/functional_enrichment_figure.pdf", sep = ""), height = 12, width = 23)
plot_grid(a, b, c, ncol = 3, nrow = 1, labels = c('A. Stable-polymorphic genes', 'B. Flexible genes', 'C. Housekeeping genes'),
align = 'hv')
dev.off()
# ## Flexible genes
resultsGO[[2]]$Description[13]
# ## Flexible genes
resultsGO[[2]]$Description[14]
# ## Flexible genes
resultsGO[[2]]$Description[12]
# "RNA splicing, via transesterification reactions with bulged adenosine as nucleophile"
resultsGO[[2]]$Description[12] <- "RNA splicing, via transesterification reactions*"
## Houskeeping genes
resultsGO[[3]]$Description[1]
# "RNA splicing, via transesterification reactions with bulged adenosine as nucleophile"
resultsGO[[3]]$Description[1] <- "RNA splicing, via transesterification reactions*"
resultsKEGG[[3]]$Description[2]
# "Glycosylphosphatidylinositol (GPI)-anchor biosynthesis"
resultsKEGG[[3]]$Description[2] <- "GPI-anchor biosynthesis**"
# "Glycosylphosphatidylinositol (GPI)-anchor biosynthesis"
resultsKEGG[[3]]$Description[2] <- "GPI-anchor biosynthesis"
olors <- list(sp = c("FALSE" = "#afeeee", "TRUE" = "#00b7ec"), fl = c("FALSE" = "#c3fde0", "TRUE" = "#00a076"), ho = c("FALSE" = "#ffdfbf", "TRUE" = "#fba200"))
for (i in 1:3) {
lims <- c(0,max(max(-log10(resultsGO[[i]]$pvalue)),
max(-log10(resultsKEGG[[i]]$pvalue)))
)
## GO_BP
go_bp[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "BP"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title =  "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## GO_CC
go_cc[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "CC"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title =  "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## GO_MF
go_mf[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "MF"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title = "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## KEGG
kegg[[i]] <- ggplot(na.omit(head(resultsKEGG[[i]], 10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "-log10(p-value)", x = "",
title =  "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
}
## Stable-polymorphic function
a <- plot_grid(go_bp[[1]], go_cc[[1]], go_mf[[1]], kegg[[1]], ncol = 1, align = 'v')
## FLexible function
b <- plot_grid(go_bp[[2]], go_cc[[2]], go_mf[[2]], kegg[[2]], ncol = 1, align = 'v')
## Housekeeping function
c <- plot_grid(go_bp[[3]], go_cc[[3]], go_mf[[3]], kegg[[3]], ncol = 1, align = 'v')
pdf(file = paste(output_dir, "functional_enrichment/functional_enrichment_figure.pdf", sep = ""), height = 12, width = 23)
plot_grid(a, b, c, ncol = 3, nrow = 1, labels = c('A. Stable-polymorphic genes', 'B. Flexible genes', 'C. Housekeeping genes'),
align = 'hv')
dev.off()
sp <- read.table(paste(input_dir, "characteristic_gene_list.txt", sep = ""))
write.table(stable_enrich2, paste(output_dir, "characteristic_gene_list.txt", sep = ""))
# Supplementary data file 2 ----
sp <- read.table(paste(input_dir, "characteristic_gene_list.txt", sep = ""))
# Supplementary data file 2 ----
sp <- read.table(paste(output_dir, "characteristic_gene_list.txt", sep = ""))
fl <- read.table(paste(output_dir, "flexible_gene_list.txt", sep = ""))
hk <- read.table(paste(output_dir, "housekeeping_gene_list.txt", sep = ""))
sdf4 <- list(sp, fl, hk)
names(sdf4) <- c("characteristic", "flexible", "housekeeping")
dataset <- useDataset(dataset = 'hsapiens_gene_ensembl', mart = useMart('ENSEMBL_MART_ENSEMBL'))
gene_names <- c()
sdf4 <- lapply(sdf4, function(x) {
gene_names <- getBM(attributes = c('hgnc_symbol','description'),
filters = 'hgnc_symbol',
values = x[[1]],
mart = dataset)
x <- gene_names
})
lapply(sdf4, head)
## First list
# $characteristic
# hgnc_symbol                                                                description
# 1        ABAT          4-aminobutyrate aminotransferase [Source:HGNC Symbol;Acc:HGNC:23]
# 2       ABCA1 ATP binding cassette subfamily A member 1 [Source:HGNC Symbol;Acc:HGNC:29]
# 3       ABCA2 ATP binding cassette subfamily A member 2 [Source:HGNC Symbol;Acc:HGNC:32]
# 4       ABCA5 ATP binding cassette subfamily A member 5 [Source:HGNC Symbol;Acc:HGNC:35]
# 5       ABCA7 ATP binding cassette subfamily A member 7 [Source:HGNC Symbol;Acc:HGNC:37]
# 6       ABCB1 ATP binding cassette subfamily B member 1 [Source:HGNC Symbol;Acc:HGNC:40]
writexl::write_xlsx(x = sdf4, path = paste(output_dir, "supplementary_data_4.xlsx", sep = ""))
## Generate plots
colors <- list(sp = c("FALSE" = "#afeeee", "TRUE" = "#00b7ec"), fl = c("FALSE" = "#c3fde0", "TRUE" = "#00a076"), ho = c("FALSE" = "#ffdfbf", "TRUE" = "#fba200"))
for (i in 1:3) {
lims <- c(0,max(max(-log10(resultsGO[[i]]$pvalue)),
max(-log10(resultsKEGG[[i]]$pvalue)))
)
## GO_BP
go_bp[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "BP"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title =  "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## GO_CC
go_cc[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "CC"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title =  "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## GO_MF
go_mf[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "MF"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title = "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## KEGG
kegg[[i]] <- ggplot(na.omit(head(resultsKEGG[[i]], 10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "-log10(p-value)", x = "",
title =  "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
}
## Stable-polymorphic function
a <- plot_grid(go_bp[[1]], go_cc[[1]], go_mf[[1]], kegg[[1]], ncol = 1, align = 'v')
## FLexible function
b <- plot_grid(go_bp[[2]], go_cc[[2]], go_mf[[2]], kegg[[2]], ncol = 1, align = 'v')
## Housekeeping function
c <- plot_grid(go_bp[[3]], go_cc[[3]], go_mf[[3]], kegg[[3]], ncol = 1, align = 'v')
pdf(file = paste(output_dir, "functional_enrichment/functional_enrichment_figure.pdf", sep = ""), height = 12, width = 23)
plot_grid(a, b, c, ncol = 3, nrow = 1, labels = c('A. Characteristic genes', 'B. Flexible genes', 'C. Housekeeping genes'),
align = 'hv')
dev.off()
resultsGO[[2]]$Description[38]
resultsKEGG[[2]]$Description[6]
# "Parathyroid hormone synthesis, secretion and action"
resultsKEGG[[2]]$Description[6] <- "PTH synthesis, secretion and action"
## Generate plots
colors <- list(sp = c("FALSE" = "#84cbeb", "TRUE" = "#005fbf"), fl = c("FALSE" = "#fffeb0", "TRUE" = "yellow4"), ho = c("FALSE" = "#f6c6ad", "TRUE" = "#fba200"))
for (i in 1:3) {
lims <- c(0,max(max(-log10(resultsGO[[i]]$pvalue)),
max(-log10(resultsKEGG[[i]]$pvalue)))
)
## GO_BP
go_bp[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "BP"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title =  "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## GO_CC
go_cc[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "CC"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title =  "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## GO_MF
go_mf[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "MF"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title = "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## KEGG
kegg[[i]] <- ggplot(na.omit(head(resultsKEGG[[i]], 10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "-log10(p-value)", x = "",
title =  "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
}
## Stable-polymorphic function
a <- plot_grid(go_bp[[1]], go_cc[[1]], go_mf[[1]], kegg[[1]], ncol = 1, align = 'v')
## FLexible function
b <- plot_grid(go_bp[[2]], go_cc[[2]], go_mf[[2]], kegg[[2]], ncol = 1, align = 'v')
## Housekeeping function
c <- plot_grid(go_bp[[3]], go_cc[[3]], go_mf[[3]], kegg[[3]], ncol = 1, align = 'v')
pdf(file = paste(output_dir, "functional_enrichment/functional_enrichment_figure.pdf", sep = ""), height = 12, width = 23)
plot_grid(a, b, c, ncol = 3, nrow = 1, labels = c('A. Characteristic genes', 'B. Flexible genes', 'C. Housekeeping genes'),
align = 'hv')
dev.off()
resultsGO[[2]]$Description[38]
# "basal RNA polymerase II transcription machinery binding"
resultsGO[[2]]$Description[38] <- "basal RNA pol II transcription machinery binding"
## Generate plots
colors <- list(sp = c("FALSE" = "#84cbeb", "TRUE" = "#005fbf"), fl = c("FALSE" = "#fffeb0", "TRUE" = "yellow4"), ho = c("FALSE" = "#f6c6ad", "TRUE" = "#fba200"))
for (i in 1:3) {
lims <- c(0,max(max(-log10(resultsGO[[i]]$pvalue)),
max(-log10(resultsKEGG[[i]]$pvalue)))
)
## GO_BP
go_bp[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "BP"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title =  "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## GO_CC
go_cc[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "CC"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title =  "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## GO_MF
go_mf[[i]] <- ggplot(na.omit(head(resultsGO[[i]][which(resultsGO[[i]]$ONTOLOGY == "MF"),],10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "", x = "",
title = "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
## KEGG
kegg[[i]] <- ggplot(na.omit(head(resultsKEGG[[i]], 10)), aes(x = factor(Description, levels = rev(Description)), y = -log10(pvalue), fill = passed)) +
geom_col(color = "black", width = 0.5, show.legend = F) +
scale_fill_manual(values = colors[[i]]) +
theme_cowplot() +
coord_flip() +
labs(y = "-log10(p-value)", x = "",
title =  "") +
ylim(lims) +
theme(axis.text.y = element_text(size = 16), axis.text.x = element_text(size = 16))
}
## Stable-polymorphic function
a <- plot_grid(go_bp[[1]], go_cc[[1]], go_mf[[1]], kegg[[1]], ncol = 1, align = 'v')
## FLexible function
b <- plot_grid(go_bp[[2]], go_cc[[2]], go_mf[[2]], kegg[[2]], ncol = 1, align = 'v')
## Housekeeping function
c <- plot_grid(go_bp[[3]], go_cc[[3]], go_mf[[3]], kegg[[3]], ncol = 1, align = 'v')
pdf(file = paste(output_dir, "functional_enrichment/functional_enrichment_figure.pdf", sep = ""), height = 12, width = 23)
plot_grid(a, b, c, ncol = 3, nrow = 1, labels = c('A. Characteristic genes', 'B. Flexible genes', 'C. Housekeeping genes'),
align = 'hv')
dev.off()
