subtitle = 'p1v samples')
psex <- biplot(p,
showLoadings = F,
lab = NULL,
colby = "sex",
legendPosition = 'right', legendLabSize = 9, legendIconSize = 3)
psub <- biplot(p,
showLoadings = F,
lab = NULL,
colby = "subject",
legendPosition = 'right', legendLabSize = 9, legendIconSize = 3)
ptre <-  biplot(p,
showLoadings = F,
lab = NULL,
colby = "treat",
legendPosition = 'right', legendLabSize = 9, legendIconSize = 3)
peigencor <- eigencorplot(p,
components = getComponents(p, 1:10),
metavars = c("time", 'sex', 'race', 'ethnicity', 'treat'),
cexCorval = 0.5,
fontCorval = 1,
posLab = 'all',
rotLabX = 45,
scale = TRUE,
colCorval = "burlywood1",
main = "PC trait correlates",
cexMain = 1.5,
plotRsquared = FALSE,
corFUN = 'pearson',
corUSE = 'pairwise.complete.obs',
signifSymbols = c('****', '***', '**', '*', ''),
signifCutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1),
returnPlot = F)
toprow <- plot_grid(ptime, psex, psub, align = 'h', nrow = 1)
botrow <- plot_grid(ptre, scree, peigencor, align = 'h', nrow = 1)
pdf(file = paste(output_dir, "pca_p1v_QC.pdf", sep = ""), height = 12, width = 16)
plot_grid(toprow, botrow, ncol = 1, align = 'v')
dev.off()
### MDS ----
### MDS can be good for getting really nice separation and pulling out outliers.
qual_col_pals <- brewer.pal.info
col_vector <- unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
colors <- sample(col_vector, length(unique(p1v$subject)))
new_colors <- c()
for (i in 1:length(p1v$subject)) {
new_colors[i] <- switch(p1v$subject[i],
"2" = colors[1], "9" = colors[2], "10" = colors[3], "12" = colors[4],
"15" = colors[5], "16" = colors[6], "20" = colors[7], "21" = colors[8],
"22" = colors[9], "23" = colors[10], "24" = colors[11], "25" = colors[12],
"1" = colors[13], "3" = colors[14], "5" = colors[15], "6" = colors[16],
"13" = colors[17], "18" = colors[18]
)
}
pdf(file = paste(output_dir, "mds_p1v_qc.pdf", sep = ""))
limma::plotMDS(x = data_norm$E,
cex = 1,
var.explained = T,
col = new_colors,
labels = paste(p1v$subject, p1v$sex, p1v$treat, sep = ", "))
title("MDS Plot- training set vein")
dev.off()
library(GEOquery)
library(affy)
library(affycoretools)
library(oligo)
library(tidyverse)
library(affyPLM)
library(PCAtools)
## Input: raw CEL files from GSE10041. This directory will be edited.
input_dir <- "~/Desktop/work_repo/data/GSE10041_RAW/"
## Output: QC plots
output_plot <- "~/Desktop/work_repo/github/Dusek_study_data/output/"
gset <- getGEO("GSE10041", GSEMatrix =TRUE, AnnotGPL=TRUE)
pheno_data_org <- pData(gset$GSE10041_series_matrix.txt.gz)
pheno_data <- pheno_data_org %>%
dplyr::select(title = title,
geo_accession = geo_accession)
pheno_data$time <- str_extract(pheno_data_org$title, "N.")
pheno_data$id <- str_extract(pheno_data_org$title, "-.*") %>%
str_replace("-","")
dim(pheno_data)
# [1] 72 4
length(grep("M", pheno_data$title)) # [1] 25 This is the correct number in the original and validation groups.
pheno_data <- pheno_data[-grep("M", pheno_data$title),] # M samples are not used for longitudinal analyses.
dim(pheno_data)
# [1] 47  4
files <- list.files(input_dir)
length(files)
# [1] 72
files <- files[!(files %in% paste(pheno_data$geo_accession, ".CEL.gz", sep = ""))]
length(files)
# [1] 25
file.remove(paste(input_dir, files, sep = ""))
raw <- ReadAffy(celfile.path = input_dir)
obj <- affy::rma(raw)
norm_expr <- exprs(obj)
colnames(norm_expr) <- str_replace(colnames(norm_expr), ".CEL.gz", replacement = "")
identical(colnames(norm_expr), rownames(pheno_data))
# [1] TRUE
dim(norm_expr)
xist_vals <- normalized_expression["227671_at",]
# [1] 54675    47
## Since sex is not in the metadata, we annotated it according to specific XIST value.
xist_vals <- norm_expr["227671_at",]
plot(xist_vals)
# [1] 47  5
table(pheno_data$id, pheno_data$sex) # patient 30 has mixed sex samples. Mislabeled.
pheno_data$sex <- NA
for (i in 1:length(xist_vals)) {
if (xist_vals[i] > 8) {
pheno_data$sex[i] <- "Female"
} else {
pheno_data$sex[i] <- "Male"
}
}
dim(pheno_data)
# [1] 47  5
table(pheno_data$id, pheno_data$sex) # patient 30 has mixed sex samples. Mislabeled.
pheno_data$geo_accession[grep("30",)] # [1] "GSM253667" "GSM253695" will be removed from analyses.
pheno_data[grep("30", pheno_data),] # [1] "GSM253667" "GSM253695" will be removed from analyses.
pheno_data[grep("30", pheno_data$id),] # [1] "GSM253667" "GSM253695" will be removed from analyses.
# title geo_accession time id    sex
# GSM253667 N1-30     GSM253667   N1 30 Female
# GSM253695 N2-30     GSM253695   N2 30   Male
grep("30", pheno_data$id),]
# title geo_accession time id    sex
# GSM253667 N1-30     GSM253667   N1 30 Female
# GSM253695 N2-30     GSM253695   N2 30   Male
grep("30", pheno_data$id)
## Check for visual abnormalities
plm <- fitPLM(raw)
which(pheno_data$id == 50) # [1] 23 47
pdf(file = paste(output_plot, "subject_50_pseudoimages.pdf"))
par(mfrow = c(1,2))
image(plm, which = 23) # some spotting
image(plm, which = 47) # very intense
dev.off()
pdf(file = paste(output_plot, "NUSE_preQC.pdf"))
NUSE(plm) # Patient 50 array time 2 array stands out. Should be removed.
dev.off()
pdf(file = paste(output_plot, "RLE_preQC.pdf"))
RLE(plm)
dev.off()
plm <- fitPLM(raw)
pdf(file = paste(output_plot, "NUSE_RLE_preQC.pdf", sep = ""))
par(mfrow = c(1,2))
RLE(plm)
NUSE(plm) # Patient 50 array time 2 array stands out. Should be removed.
dev.off()
pheno_data[length(pheno_data),]
pheno_data
length(pheno_data)
pheno_data[nrow(pheno_data),]
which(pheno_data$id == 50) # [1] 23 47
pdf(file = paste(output_plot, "subject_50_pseudoimages.pdf", sep = ""))
par(mfrow = c(1,2))
image(plm, which = 23) # some spotting
image(plm, which = 47) # very intense
dev.off()
## Principal component analysis
# First, filter unexpressed genes
calls <- mas5calls.AffyBatch(raw)
probe_pval <- assayData(calls)[["se.exprs"]] ## Returns p-values
dim(probe_pval)
# [1] 54675    47
minSamples <- min(colSums(table(pheno_data$id, pheno_data$time)))
print(minSamples)
# [1] 23
expressed <- rowSums(probe_pval < 0.05) >= minSamples
dim(norm_expr)
norm_expr <- norm_expr[expressed,]
dim(norm_expr)
p <- pca(as.matrix(norm_expr), metadata = pheno_data, center = T, scale = T)
loads <- rownames(p$loadings)
loads <- mapIds(hgu133plus2.db, loads, "SYMBOL", "PROBEID")
loads <- make.names(ifelse(is.na(loads), names(loads), unname(loads)), unique = T)
rownames(p$loadings) <- loads
pdf(file = paste(output_plot, "preQC_pca.pdf"))
biplot(p, showLoadings = T, colby = "time", shape = "sex", encircle = T, lab = pheno_data$id, legendPosition = "right")
dev.off()
obj <- affy::rma(raw)
norm_expr <- exprs(obj)
colnames(norm_expr) <- str_replace(colnames(norm_expr), ".CEL.gz", replacement = "")
identical(colnames(norm_expr), rownames(pheno_data))
# [1] TRUE
dim(norm_expr)
p <- pca(as.matrix(norm_expr), metadata = pheno_data, center = T, scale = T)
loads <- rownames(p$loadings)
loads <- mapIds(hgu133plus2.db, loads, "SYMBOL", "PROBEID")
library(hgu133plus2.db)
p <- pca(as.matrix(norm_expr), metadata = pheno_data, center = T, scale = T)
loads <- rownames(p$loadings)
loads <- mapIds(hgu133plus2.db, loads, "SYMBOL", "PROBEID")
loads <- make.names(ifelse(is.na(loads), names(loads), unname(loads)), unique = T)
rownames(p$loadings) <- loads
pdf(file = paste(output_plot, "nofilter_preQC_pca.pdf", sep = ""))
biplot(p, showLoadings = T, colby = "time", shape = "sex", encircle = T, lab = pheno_data$id, legendPosition = "right")
dev.off()
## Date: Oct 21 2024
# The following code contains a standard limma analysis and some quality control calculations we generated.
# Load libraries ----
library(oligo)
library(tidyverse)
library(limma)
library(affy)
library(affyPLM)
library(affycoretools)
library(hgu133plus2.db)
library(GEOquery)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(cowplot)
library(PCAtools)
library(EnhancedVolcano)
library(RColorBrewer)
## INPUT: Raw .CEL files from GSE81761
input_dir <- "~/Desktop/work_repo/data/GSE14844_RAW/"
## OUTPUT: limma results, plots, figures
output_dir <- "~/Desktop/work_repo/github/Meaburn_study_data/output/"
## Get study metadata and separate by day ----
gset <- getGEO("GSE14844", GSEMatrix =TRUE, AnnotGPL=TRUE)
pheno_data_org <- pData(gset$GSE14844_series_matrix.txt.gz)
feature_data <- fData(gset$GSE14844_series_matrix.txt.gz)
names(pheno_data_org)
# filter out traits we want
pheno_data <- pheno_data_org %>%
dplyr::select(title = title,
geo_accession = geo_accession,
sex = `gender:ch1`)
pheno_data$time = str_extract(pheno_data_org$title, "Day.*")
pheno_data$id = str_extract(pheno_data$title, "TD.....")
pheno_data$time[12] <- "Daytwo_10am"
dim(pheno_data)
# [1] 36  5
table(pheno_data$sex, pheno_data$time)
#        Dayone_10am Dayone_2pm Daytwo_10am Daytwo_2pm
# Female           8          8           6          8
# Male             2          1           1          2
## Suffices for analysis?
p1 <- pheno_data[grep("Dayone", pheno_data$time),]
p2 <- pheno_data[grep("Daytwo", pheno_data$time),]
## We know that the data were batched because of the mismatch of control probes:
data <- ReadAffy(celfile.path = input_dir)
data <- affy::rma(data)
norm_expr <- exprs(data)
colnames(norm_expr) <- str_extract(colnames(norm_expr), "GSM\\d+")
identical(rownames(pheno_data), colnames(norm_expr)) # [1] TRUE
source("~/Desktop/work_repo/github/misc/Affy_control_probe_check.R")
a <- polyA_check(norm_expr, pheno_data, "time")[[1]]
b <- hybrid_check(norm_expr, pheno_data, "time")[[1]]
c <- positive_check(norm_expr, pheno_data, "time")
pdf(file = paste(output_dir, "control_probes_batched.pdf"), height = 7, width = 12)
plot_grid(a,b,c, nrow = 1)
dev.off()
## Poly A an hybridization show concerning batch effects, justifying our separation of the days.
# Analysis of day 1 data ----
celfiles <- list.files(input_dir, full.names = T)
c1 <- celfiles[which(str_extract(celfiles, "GSM\\d+") %in% p1$geo_accession)]
length(c1) # [1] 19
data <- ReadAffy(filenames = c1)
## Raw data QC----
## According to the researchers, poor or abnormal arrays were already filtered out using the same methods
## we use (Mearburn et al. 2009). This is simply to double-check array quality.
library(affyPLM)
Pset <- fitPLM(data) #input non-normalized data
pdf(file = paste(output_dir, "RLE_and_NUSE_day_1.pdf", sep = ""))
par(mfrow = c(1,2))
RLE(Pset,main = "RLE for Meaburn day 1 raw data")
NUSE(Pset, main = "NUSE for Meaburn day 1 raw data")
dev.off()
# These arrays have good statistics.
## Get expression calls using MAS 5.0 ----
calls <- mas5calls.AffyBatch(data)
probe_pval <- assayData(calls)[["se.exprs"]] ## Returns p-values
dim(probe_pval)
# [1] 54675    19
minSamples <- min(colSums(table(p1$id, p1$time)))
print(minSamples)
# [1] 9
expressed <- rowSums(probe_pval < 0.05) >= minSamples
## Normalize the data into an eSet ----
data <- affy::rma(data)
# Get expression estimates
normalized_expression <- exprs(data)
## Remove unexpressed probes
normalized_expression <- normalized_expression[expressed,]
dim(normalized_expression)
# [1] 25419    19
normalized_expression[1:5,1:5]
#           GSM371373.CEL.gz GSM371374.CEL.gz GSM371376.CEL.gz GSM371378.CEL.gz GSM371383.CEL.gz
# 1007_s_at         7.376076         7.171558         7.129033         7.127949         6.941682
# 1053_at           7.195994         7.161228         7.194788         7.208823         7.268647
# 117_at            9.833055         9.674456         9.631341         9.478013         9.385483
# 121_at            7.799649         7.734322         7.524356         7.258983         7.480098
# 1255_g_at         2.731875         2.619617         2.555998         2.635680         2.636198
colnames(normalized_expression) <- gsub(pattern = "(.CEL.gz)", replacement = "", x = colnames(normalized_expression))
df <- data.frame(normalized_expression)
identical(colnames(df), rownames(p1))
# [1] TRUE
table(p1$sex, p1$id)
#        TD19901 TD19902 TD23461 TD23462 TD24111 TD24112 TD32681 TD32682 TD51281 TD51282
# Female       2       2       2       2       2       2       0       0       2       2
# Male         0       0       0       0       0       0       2       1       0       0
table(p1$time, p1$id)
#             TD19901 TD19902 TD23461 TD23462 TD24111 TD24112 TD32681 TD32682 TD51281 TD51282
# Dayone_10am       1       1       1       1       1       1       1       1       1       1
# Dayone_2pm        1       1       1       1       1       1       1       0       1       1
## Normalized data QC----
### Plots and quantiles
pdf(file = paste(output_dir, "features_hist_day1.pdf"))
hist(normalized_expression)
dev.off()
pdf(file = paste(output_dir, "samples_box_day2.pdf"))
boxplot(normalized_expression)
dev.off()
quantile(normalized_expression)
# 0%       25%       50%       75%      100%
# 1.881568  5.579088  6.916074  8.236908 14.629243
# What are the highly expressed RNAs?
avg_gene_exp <- rowMeans(x = normalized_expression, na.rm = T)
head(avg_gene_exp) # creates vector of each gene's mean
avg_gene_exp <- avg_gene_exp[order(avg_gene_exp, decreasing = T)] # order by decreasing order
mapIds(x = hgu133plus2.db, keys = head(names(avg_gene_exp)), keytype = "PROBEID", column = "SYMBOL")
# AFFX-hum_alu_at     217414_x_at     204018_x_at     214414_x_at     211745_x_at     209458_x_at
#              NA          "HBA2"          "HBA1"          "HBA1"          "HBA1"          "HBA1"
## MDS and PCA ----
### PCA tools ----
library(PCAtools)
p <- pca(df, metadata = p1, center = T, scale = T)
scree <- screeplot(p)
ptime <- biplot(p,
showLoadings = F,
lab = NULL,
colby = "time", colkey = c("Dayone_10am" = "blue", "Dayone_2pm" = "red"),
legendPosition = 'right', legendLabSize = 12, legendIconSize = 3,
title = 'Meaburn 4 hours',
subtitle = 'day 1')
psex <- biplot(p,
showLoadings = F,
lab = NULL,
colby = "sex",
legendPosition = 'right', legendLabSize = 9, legendIconSize = 3)
psub <- biplot(p,
showLoadings = F,
lab = NULL,
colby = "id",
legendPosition = 'right', legendLabSize = 9, legendIconSize = 3)
peigencor <- eigencorplot(p,
components = getComponents(p, 1:10),
metavars = c("time", 'sex'),
cexCorval = 1.0,
fontCorval = 2,
posLab = 'all',
rotLabX = 45,
scale = TRUE,
colCorval = "burlywood1",
main = "PC trait correlates",
cexMain = 1.5,
plotRsquared = FALSE,
corFUN = 'pearson',
corUSE = 'pairwise.complete.obs',
signifSymbols = c('****', '***', '**', '*', ''),
signifCutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1),
returnPlot = F)
toprow <- plot_grid(ptime, psex, psub, align = 'h', nrow = 1)
botrow <- plot_grid(scree, peigencor, align = 'h', nrow = 1)
pdf(file = paste(output_dir, "pca_day_one.pdf", sep = ""), height = 12, width = 16)
plot_grid(toprow, botrow, ncol = 1, align = 'v')
dev.off()
### MDS ----
qual_col_pals <- brewer.pal.info
col_vector <- unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
colors <- sample(col_vector, length(unique(p1$id)))
new_colors <- c()
for (i in 1:length(p1$id)) {
new_colors[i] <- switch(p1$id[i],
"TD19901" = colors[1], "TD19902" = colors[2], "TD23461" = colors[3], "TD23462" = colors[4],
"TD24111" = colors[5], "TD24112" = colors[6], "TD32681" = colors[7], "TD32682" = colors[8],
"TD51281" = colors[9], "TD51282" = colors[10]
)
}
pdf(file = paste(output_dir, "mds_day_one.pdf", sep = ""))
limma::plotMDS(x = df,
cex = 1,
var.explained = T,
col = new_colors,
labels = paste(p1$id, p1$sex, sep = ", "))
title("MDS Plot")
dev.off()
pdf(file = paste(output_dir, "samples_box_day1.pdf"))
boxplot(normalized_expression)
dev.off()
c2 <- celfiles[which(str_extract(celfiles, "GSM\\d{6}") %in% p2$geo_accession)]
length(c2) # [1] 17
data <- ReadAffy(filenames = c2)
## Raw data QC----
## According to the researchers, poor or abnormal arrays were already filtered out using the same methods
## we use (Mearburn et al. 2009). This is simply to double-check array quality.
library(affyPLM)
Pset <- fitPLM(data) #input non-normalized data
pdf(file = paste(output_dir, "RLE_and_NUSE_day_2.pdf", sep = ""))
par(mfrow = c(1,2))
RLE(Pset,main = "RLE for Meaburn day 2 raw data")
NUSE(Pset, main = "NUSE for Meaburn day 2 raw data")
dev.off()
# These arrays have good statistics.
## Get expression calls using MAS 5.0 ----
calls <- mas5calls.AffyBatch(data)
probe_pval <- assayData(calls)[["se.exprs"]] ## Returns p-values
dim(probe_pval)
# [1] 54675    17
minSamples <- min(colSums(table(p2$id, p2$time)))
print(minSamples)
# [1] 7
expressed <- rowSums(probe_pval < 0.05) >= minSamples
## Normalize the data into an eSet ----
data <- affy::rma(data)
# Get expression estimates
normalized_expression <- exprs(data)
normalized_expression <- normalized_expression[expressed,]
dim(normalized_expression)
# [1] 26474    17
normalized_expression[1:5,1:5]
#          GSM371375.CEL.gz GSM371377.CEL.gz GSM371379.CEL.gz GSM371380.CEL.gz GSM371381.CEL.gz
# 1007_s_at         7.408323         7.290897         7.013294         6.694431         6.882215
# 1053_at           7.028865         7.160074         7.468729         7.249186         7.172744
# 117_at            9.305568         9.376824         9.305617        10.009949        10.174146
# 121_at            7.689531         7.639373         7.268682         7.098646         7.354284
# 1294_at           8.158172         8.307702         8.385276         8.202762         8.054674
colnames(normalized_expression) <- gsub(pattern = "(.CEL.gz)", replacement = "", x = colnames(normalized_expression))
df <- data.frame(normalized_expression)
identical(colnames(df), rownames(p2))
# [1] TRUE
table(p2$sex, p2$id)
#        TD19901 TD19902 TD23461 TD23462 TD24111 TD24112 TD32681 TD32682 TD51281 TD51282
# Female       1       2       2       1       2       2       0       0       2       2
# Male         0       0       0       0       0       0       2       1       0       0
table(p2$time, p2$id)
#             TD19901 TD19902 TD23461 TD23462 TD24111 TD24112 TD32681 TD32682 TD51281 TD51282
# Daytwo_10am       0       1       1       0       1       1       1       0       1       1
# Daytwo_2pm        1       1       1       1       1       1       1       1       1       1
pdf(file = paste(output_dir, "features_hist_day2.pdf", sep = ""))
hist(normalized_expression)
dev.off()
pdf(file = paste(output_dir, "samples_box_day2.pdf", sep = ""))
boxplot(normalized_expression)
dev.off()
quantile(normalized_expression)
## MDS and PCA ----
### PCA tools ----
library(PCAtools)
p <- pca(df, metadata = p2, center = T, scale = T)
scree <- screeplot(p)
ptime <- biplot(p,
showLoadings = F,
lab = NULL,
colby = "time", colkey = c("Daytwo_10am" = "blue", "Daytwo_2pm" = "red"),
legendPosition = 'right', legendLabSize = 12, legendIconSize = 3,
title = 'Meaburn 4 hours',
subtitle = 'day 2')
psex <- biplot(p,
showLoadings = F,
lab = NULL,
colby = "sex",
legendPosition = 'right', legendLabSize = 9, legendIconSize = 3)
psub <- biplot(p,
showLoadings = F,
lab = NULL,
colby = "id",
legendPosition = 'right', legendLabSize = 9, legendIconSize = 3)
peigencor <- eigencorplot(p,
components = getComponents(p, 1:10),
metavars = c("time", 'sex'),
cexCorval = 1.0,
fontCorval = 2,
posLab = 'all',
rotLabX = 45,
scale = TRUE,
colCorval = "burlywood1",
main = "PC trait correlates",
cexMain = 1.5,
plotRsquared = FALSE,
corFUN = 'pearson',
corUSE = 'pairwise.complete.obs',
signifSymbols = c('****', '***', '**', '*', ''),
signifCutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1),
returnPlot = F)
toprow <- plot_grid(ptime, psex, psub, align = 'h', nrow = 1)
botrow <- plot_grid(scree, peigencor, align = 'h', nrow = 1)
pdf(file = paste(output_dir, "pca_day_two.pdf", sep = ""), height = 12, width = 16)
plot_grid(toprow, botrow, ncol = 1, align = 'v')
dev.off()
### MDS ----
qual_col_pals <- brewer.pal.info
col_vector <- unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
colors <- sample(col_vector, length(unique(p2$id)))
new_colors <- c()
for (i in 1:length(p2$id)) {
new_colors[i] <- switch(p1$id[i],
"TD19901" = colors[1], "TD19902" = colors[2], "TD23461" = colors[3], "TD23462" = colors[4],
"TD24111" = colors[5], "TD24112" = colors[6], "TD32681" = colors[7], "TD32682" = colors[8],
"TD51281" = colors[9], "TD51282" = colors[10]
)
}
pdf(file = paste(output_dir, "mds_day_two.pdf", sep = ""))
limma::plotMDS(x = df,
cex = 1,
var.explained = T,
col = new_colors,
labels = paste(p2$id, p2$sex, sep = ", "))
title("MDS Plot")
dev.off()
