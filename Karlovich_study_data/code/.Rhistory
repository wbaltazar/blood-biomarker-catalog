dev.off()
colnames(normalized_expression)
colnames(normalized_expression) <- gsub(pattern = "(.CEL.gz)", replacement = "", x = colnames(normalized_expression)) # greps file extension and replaces it
dim(normalized_expression)
df <- data.frame(normalized_expression)
identical(colnames(df), p2$geo_accession)
colnames(df)
p2 <- p2[p2$geo_accession %in% colnames(df), ]
identical(colnames(df), p2$geo_accession)
### Principal Component Analysis, again ----
p <- pca(df, metadata = p2, center = T, scale = T)
scree <- screeplot(p, components = getComponents(p, 1:20))
ptime <- biplot(p,
showLoadings = F,
lab = NULL,
colby = "time",
legendPosition = 'right', legendLabSize = 12, legendIconSize = 3,
title = 'Karlovich batch 2',
subtitle = 'PC1 versus PC2')
psex <- biplot(p,
showLoadings = F,
lab = NULL,
colby = "sex", colkey = c('turquoise', 'orange'),
legendPosition = 'right', legendLabSize = 12, legendIconSize = 3)
psub <- biplot(p,
showLoadings = F,
lab = NULL,
colby = "subject",
legendPosition = 'right', legendLabSize = 9, legendIconSize = 3)
peigencor <- eigencorplot(p,
components = getComponents(p, 1:10),
metavars = c("time", 'sex'),
cexCorval = 1.0,
fontCorval = 2,
posLab = 'all',
rotLabX = 45,
scale = TRUE,
colCorval = "burlywood1",
main = "PC trait correlates",
cexMain = 1.5,
plotRsquared = FALSE,
corFUN = 'pearson',
corUSE = 'pairwise.complete.obs',
signifSymbols = c('****', '***', '**', '*', ''),
signifCutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1),
returnPlot = F)
toprow <- plot_grid(ptime, psex, psub, align = 'h', nrow = 1)
botrow <- plot_grid(scree, peigencor, align = 'h', nrow = 1)
pdf(file = paste(output_dir, "pca_batch2_2.pdf", sep = ""), height = 12, width = 16)
plot_grid(toprow, botrow, ncol = 1, align = 'v')
dev.off()
# Day 90 subject 121 (GSM401087) and Day 180 subject 172 (GSM401148) both had elevated NUSEs and
# drive PC1 and PC2. Removing both of these samples later.
# MDS plot
qual_col_pals <- brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector <- unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
colors <- sample(col_vector, 21)
new_colors <- c()
for (i in 1:length(p2$subject)) {
new_colors[i] <- switch(p2$subject[i],
"106" = colors[1], "108" = colors[2], "113" = colors[3], "114" = colors[4], "117" = colors[5],
"121" = colors[6], "123" = colors[7], "131" = colors[8], "135" = colors[9], "138" = colors[10],
"147" = colors[11], "148" = colors[12], "173" = colors[13], "172" = colors[14], "179" = colors[15],
"180" = colors[16], "154" = colors[17], "159" = colors[18], "160" = colors[19], "163" = colors[20],
"165" = colors[21],
)
}
pdf(file = paste(output_dir, "mds_batch2_2.pdf", sep = ""))
limma::plotMDS(x = df,
cex = 1,
var.explained = T,
col = new_colors,
labels = paste(p2$subject, p2$time))
title("MDS Plot (batch 2)")
dev.off()
control_index <- grep("lys|Lys|thr|Thr|dap|Dap|phe|Phe|Trp|bioB|BioB|BioC|bioC|bioD|BioD|cre|Cre", x = row.names(df))
rownames(df)[control_index]
df <- df[-control_index,]
dim(df)
rownames(df)[grep("AFFX", x = rownames(df))]
# [1] "AFFX-HSAC07/X00351_3_at"     "AFFX-HSAC07/X00351_5_at"     "AFFX-HSAC07/X00351_M_at"
# [4] "AFFX-hum_alu_at"             "AFFX-HUMGAPDH/M33197_3_at"   "AFFX-HUMGAPDH/M33197_5_at"
# [7] "AFFX-HUMGAPDH/M33197_M_at"   "AFFX-HUMISGF3A/M97935_3_at"  "AFFX-HUMISGF3A/M97935_5_at"
# [10] "AFFX-HUMISGF3A/M97935_MA_at" "AFFX-HUMISGF3A/M97935_MB_at" "AFFX-HUMRGE/M10098_3_at"
# [13] "AFFX-HUMRGE/M10098_5_at"     "AFFX-HUMRGE/M10098_M_at"     "AFFX-M27830_3_at"
# [16] "AFFX-M27830_5_at"            "AFFX-M27830_M_at"
# Remove control probes (AFFX probes)
control_index <- grep("AFFX", x = row.names(df))
rownames(df)[control_index]
df <- df[-control_index,]
dim(df)
rownames(df)[grep("AFFX", x = rownames(df))]
# character(0)
# combine all factors into unique identifiers, using ID as indices
sex <- factor(p2$sex)
time <- factor(p2$time)
id <- factor(p2$subject)
TS <- paste(sex, time, sep=".")
TS <- factor(TS)
design <- model.matrix(~0+TS, df) # 0 indicates y-intercept
colnames(design) <- make.names(levels(TS))
cor <- duplicateCorrelation(df, design, block=id) # here, ID identifies which samples correlate
cor$consensus.correlation
# [1] 0.168133
fit <- lmFit(object=df, design=design, block=id, correlation=cor$consensus.correlation)
#To find the genes changing across time regardless of sex
my_contrasts <- makeContrasts(Time = (Female.Day.180 + Male.Day.180)/2 - (Female.Day.90 + Male.Day.90)/2,
IMaleTime = (Male.Day.180 - Male.Day.90)/2 - (Female.Day.180 - Female.Day.90)/2,
levels = colnames(design))
fit2 <- contrasts.fit(fit, my_contrasts)
x <- eBayes(fit2)
dir.create(paste(output_dir, "batch2_limma", sep = ""))
batch_dir <- paste(output_dir, "batch2_limma/", sep = "")
y <- topTable(x, number = Inf, adjust.method = "fdr", sort.by = "F")
y$Symbol <- mapIds(x = hgu133plus2.db, keys = row.names(y), column = "SYMBOL", keytype = "PROBEID")
write.csv(y, file = paste(batch_dir, "limma_F.csv", sep = ""), row.names = T)
dt <- decideTests(x)
summary(dt)
#         Time Time_sex
# Down       0        0
# NotSig 54630    54630
# Up         0        0
dt <- decideTests(x, adjust.method = "none")
summary(dt)
#         Time Time_sex
# Down     874     3399
# NotSig 52928    49655
# Up       828     1576
names(y)
# [1] "Day14"      "Day28"      "IMaleDay14" "IMaleDay28" "AveExpr"    "F"          "P.Value"    "adj.P.Val"  "Symbol"
tables <- list()
for (i in 1:4) {
tables[[i]] <- topTable(x, number = Inf, coef = i, adjust.method = "fdr")
names(tables)[i] <- names(y)[i]
tables[[i]]$Symbol <- mapIds(x = hgu133plus2.db, keys = row.names(tables[[i]]), column = "SYMBOL", keytype = "PROBEID")
write.csv(tables[[i]], file = paste(batch_dir, "limma_", names(y)[i], ".csv", sep = ""), row.names = T)
}
tables
histlist <- list()
for (i in 1:2) {
histlist[[i]] <- ggplot(data = tables[[i]], aes(x = P.Value)) +
geom_histogram(fill = "lightblue", color = "black") +
ggtitle(names(tables)[i]) +
theme_cowplot() +
theme(title = element_text(size = 7.5))
}
pdf(file = paste(batch_dir, "p_value_histograms.pdf", sep = ""))
plot_grid(plotlist = histlist, nrow = 1)
dev.off()
histlist <- list()
for (i in 1:2) {
histlist[[i]] <- ggplot(data = tables[[i]], aes(x = adj.P.Val)) +
geom_histogram(fill = "lightblue", color = "black") +
ggtitle(names(tables)[i]) +
theme_cowplot() +
theme(title = element_text(size = 7.5))
}
pdf(file = paste(batch_dir, "adj_p_value_histograms.pdf", sep = ""))
plot_grid(plotlist = histlist, nrow = 1)
dev.off()
volcanos <- list()
for (i in 1:2) {
volcanos[[i]] <- EnhancedVolcano(tables[[i]],
lab = tables[[i]]$Symbol,
x = "logFC",
y = "P.Value",
title = "", titleLabSize = 8,
subtitle = names(tables)[i], subtitleLabSize = 12,
caption = "",
col = c("black","lightblue","royalblue","blue"),
legendPosition = 'none'
pCutoff = 1e-2,
## EnhancedVolcano plots----
volcanos <- list()
for (i in 1:2) {
volcanos[[i]] <- EnhancedVolcano(tables[[i]],
lab = tables[[i]]$Symbol,
x = "logFC",
y = "P.Value",
title = "", titleLabSize = 8,
subtitle = names(tables)[i], subtitleLabSize = 12,
caption = "",
col = c("black","lightblue","royalblue","blue"),
legendPosition = 'none',
pCutoff = 1e-2,
FCcutoff = 1,
labSize = (4.0),
colAlpha = 1,
pointSize = 1.0,
drawConnectors = TRUE,
max.overlaps = 50)
}
pdf(paste(batch_dir, "volcanos.pdf", sep = ""))
plot_grid(plotlist = volcanos, nrow = 1)
dev.off()
library(AnnotationDbi)
library(limma)
library(oligo)
library(tidyverse)
library(cowplot)
library(GEOquery)
library(variancePartition)
library(heritability)
library(pheatmap)
library(affy)
library(affycoretools)
library(hgu133plus2.db)
## INPUT: .CEL files from GSE16028
input_dir <- "~/Desktop/work_repo/data/"
## OUTPUT: tables and graphics
output_dir <- "~/Desktop/work_repo/github/Karlovich_study_data/output/"
# Load in metadata and create batches ----
gset <- getGEO("GSE16028", GSEMatrix =TRUE, AnnotGPL=TRUE)
pheno_data_org <- pData(gset$GSE16028_series_matrix.txt.gz)
# select necessary columns
pheno_data <- pheno_data_org %>%
dplyr::select(title,
geo_accession,
subject = `patient identifier:ch1`,
age = `age (years):ch1`,
sex = `sex:ch1`,
time = `day:ch1`)
head(pheno_data)
#                                              title geo_accession subject age  sex    time
# GSM401059   Blood sample from patient 106 at Day 1     GSM401059     106  40 Male   Day 1
# GSM401060  Blood sample from patient 106 at Day 14     GSM401060     106  40 Male  Day 14
# GSM401061  Blood sample from patient 106 at Day 28     GSM401061     106  40 Male  Day 28
# GSM401062  Blood sample from patient 106 at Day 90     GSM401062     106  40 Male  Day 90
# GSM401063 Blood sample from patient 106 at Day 180     GSM401063     106  40 Male Day 180
# GSM401064   Blood sample from patient 108 at Day 1     GSM401064     108  24 Male   Day 1
p1 <- pheno_data[-grep("Day 90|Day 180", pheno_data$time), ]
dim(p1)
# [1] 66  6
p2 <- pheno_data[grep("Day 90|Day 180", pheno_data$time), ]
dim(p2)
# [1] 43  6
# Analysis of day 1 data ----
files <- list.files(paste(input_dir, "GSE16028_RAW", sep = ""), full.names = T)
files <- files[str_extract(files, "GSM\\d+") %in% p1$geo_accession]
length(files)
# [1] 66
data <- ReadAffy(filenames = files)
data <- affy::rma(data)
norm_expr <- exprs(data)
dim(norm_expr)
table(p1$sex, p1$id)
# [1] 54675    66
table(p1$sex, p1$subject)
## varianceParitition 1 ----
names(p1)
# "title"         "geo_accession" "subject"       "age"           "sex"           "time"
formula <- ~ (1|subject) + as.numeric(age) + (1|time) + (1|sex) + (1|time:sex) + as.numeric(age):time
param <- SnowParam(4, "SOCK", progressbar = TRUE)
varPart <- fitExtractVarPartModel(exprObj = norm_expr, formula = formula, data = p1, BPPARAM = param)
varPart <- fitExtractVarPartModel(exprObj = norm_expr, formula = formula, data = p1, BPPARAM = param)
vp <- sortCols(varPart)
vp <- sortCols(varPart)
pdf(paste(output_dir, "batch1_vp_violin_plot.pdf", sep = ""))
plotVarPart(vp)
dev.off()
## standard deviation ----
avgexpr <- rowMeans(norm_expr)
sd_total <- apply(norm_expr, 1, sd)
colnames(norm_expr) <- p1$subject
person <- as.factor(colnames(norm_expr))
within_person_sd <- list()
for (i in 1:length(levels(person))){
if (length(grep(paste0("\\b",levels(person)[[i]],"\\b",collapse = ""), colnames(norm_expr))) != 1) {
col_index <- grep(paste0("\\b",levels(person)[[i]],"\\b",collapse = ""), colnames(norm_expr))
within_person_sd[[i]] <- apply(norm_expr[, col_index], 1, sd)
} else {
col_index <- grep(paste0("\\b",levels(person)[[i]],"\\b",collapse = ""), colnames(norm_expr))
within_person_sd[[i]] <- rep(NA, times = length(norm_expr[, col_index]))
}
}
within_person_sd2 <- as.data.frame(matrix(unlist(within_person_sd), nrow = length(within_person_sd[[i]])))
row.names(within_person_sd2) <- names(within_person_sd[[i]])
names(within_person_sd2) <- levels(person)
within_person_sd2
sd_within <- rowMeans(within_person_sd2, na.rm = TRUE)
head(sd_within)
# 1007_s_at    1053_at     117_at     121_at  1255_g_at    1294_at
# 0.11101551 0.07088556 0.12074206 0.13273315 0.07930451 0.16932864
data_var <- as.data.frame(matrix(cbind(sd_within, sd_total), nrow = length(sd_within)))
rownames(data_var) <- rownames(norm_expr)
names(data_var) <- c("Within Variation (SD)", "Total Variation (SD)")
data_var$Rs <- data_var$`Within Variation (SD)` / data_var$`Total Variation (SD)`
data_var$`Average Expression` <- avgexpr
data_var$temp <- rownames(data_var)
vp$temp <- rownames(vp)
data_var <- merge(data_var, vp, by = "temp", sort = F)
head(data_var)
## heritability ----
prepared_covariates <- p1[,c("time","sex")]
results <- vector("list", nrow(norm_expr))
p1$subject <- factor(p1$subject)
for (i in 1:nrow(norm_expr)) {
results[[i]] <- repeatability(data.vector = norm_expr[i,],
geno.vector = p1$subject,
covariates.frame = prepared_covariates)
}
broad_sense_heritability <- do.call(rbind, lapply(results, function(x) {
as.data.frame(t(unlist(x)))
}))
head(broad_sense_heritability)
broad_sense_heritability <- broad_sense_heritability[,1:3]
broad_sense_heritability$temp <- rownames(norm_expr)
data_var <- merge(data_var, broad_sense_heritability, by = "temp")
rownames(data_var) <- data_var$temp
data_var <- data_var[,-1]
genenames <- rownames(data_var)
genenames <- mapIds(hgu133plus2.db, genenames, "SYMBOL", "PROBEID")
genenames <- make.names(ifelse(is.na(genenames), names(genenames), unname(genenames)), unique = T)
data_var$Symbol <- genenames
## Heatmap ----
pdf(paste(output_dir, "batch1_statistic_correlations.pdf", sep = ""))
pheatmap(cor(data_var[,-length(names(data_var))]), display_numbers = T, fontsize_number = 4)
dev.off()
## Save ----
write.csv(data_var, paste(output_dir, "Karlovich_batch1_variation.csv", sep = ""), row.names = T)
data_var
files <- list.files(paste(input_dir, "GSE16028_RAW", sep = ""), full.names = T)
files <- files[str_extract(files, "GSM\\d+") %in% p2$geo_accession]
length(files)
# [1] 43
files <- files[-grep("GSM401157|GSM401087|GSM401148", files)]
length(files)
# [1] 40
data <- ReadAffy(filenames = files)
data <- affy::rma(data)
norm_expr <- exprs(data)
dim(norm_expr)
# [1] 54675    40
colnames(norm_expr) <- gsub(pattern = "(.CEL.gz)", replacement = "", x = colnames(norm_expr)) # greps file extension and replaces it
dim(norm_expr)
df <- data.frame(norm_expr)
p2 <- p2[p2$geo_accession %in% colnames(df), ]
identical(colnames(df), p2$geo_accession)
# [1] TRUE
table(p2$sex, p2$subject)
#        TD19901 TD19902 TD23461 TD23462 TD24111 TD24112 TD32681 TD32682 TD51281 TD51282
# Female       1       2       2       1       2       2       0       0       2       2
# Male         0       0       0       0       0       0       2       1       0       0
name
## varianceParitition 2 ----
names(p2)
# [1] "title"         "geo_accession" "subject"       "age"           "sex"           "time"
param <- SnowParam(4, "SOCK", progressbar = TRUE)
varPart <- fitExtractVarPartModel(exprObj = norm_expr, formula = formula, data = p2, BPPARAM = param)
vp <- sortCols(varPart)
pdf(paste(output_dir, "batch2_vp_violin_plot.pdf", sep = ""))
plotVarPart(vp)
dev.off()
## standard deviation ----
avgexpr <- rowMeans(norm_expr)
sd_total <- apply(norm_expr, 1, sd)
colnames(norm_expr) <- p2$subject
person <- as.factor(colnames(norm_expr))
within_person_sd <- list()
for (i in 1:length(levels(person))){
if (length(grep(paste0("\\b",levels(person)[[i]],"\\b",collapse = ""), colnames(norm_expr))) != 1) {
col_index <- grep(paste0("\\b",levels(person)[[i]],"\\b",collapse = ""), colnames(norm_expr))
within_person_sd[[i]] <- apply(norm_expr[, col_index], 1, sd)
} else {
col_index <- grep(paste0("\\b",levels(person)[[i]],"\\b",collapse = ""), colnames(norm_expr))
within_person_sd[[i]] <- rep(NA, times = length(norm_expr[, col_index]))
}
}
within_person_sd2 <- as.data.frame(matrix(unlist(within_person_sd), nrow = length(within_person_sd[[i]])))
row.names(within_person_sd2) <- names(within_person_sd[[i]])
names(within_person_sd2) <- levels(person)
within_person_sd2
sd_within <- rowMeans(within_person_sd2, na.rm = TRUE)
head(sd_within)
# 1007_s_at    1053_at     117_at     121_at  1255_g_at    1294_at
# 0.10340392 0.06814007 0.08893897 0.14513779 0.06512726 0.04513723
data_var <- as.data.frame(matrix(cbind(sd_within, sd_total), nrow = length(sd_within)))
rownames(data_var) <- rownames(norm_expr)
names(data_var) <- c("Within Variation (SD)", "Total Variation (SD)")
data_var$Rs <- data_var$`Within Variation (SD)` / data_var$`Total Variation (SD)`
data_var$`Average Expression` <- avgexpr
data_var$temp <- rownames(data_var)
vp$temp <- rownames(vp)
data_var <- merge(data_var, vp, by = "temp", sort = F)
head(data_var)
## heritability ----
prepared_covariates <- p2[,c("time","sex")]
results <- vector("list", nrow(norm_expr))
p2$subject <- factor(p2$subject)
for (i in 1:nrow(norm_expr)) {
results[[i]] <- repeatability(data.vector = norm_expr[i,],
geno.vector = p2$subject,
covariates.frame = prepared_covariates)
}
broad_sense_heritability <- do.call(rbind, lapply(results, function(x) {
as.data.frame(t(unlist(x)))
}))
head(broad_sense_heritability)
broad_sense_heritability <- broad_sense_heritability[,1:3]
broad_sense_heritability$temp <- rownames(norm_expr)
data_var <- merge(data_var, broad_sense_heritability, by = "temp")
rownames(data_var) <- data_var$temp
data_var <- data_var[,-1]
genenames <- rownames(data_var)
genenames <- mapIds(hgu133plus2.db, genenames, "SYMBOL", "PROBEID")
genenames <- make.names(ifelse(is.na(genenames), names(genenames), unname(genenames)), unique = T)
data_var$Symbol <- genenames
## Heatmap ----
pdf(paste(output_dir, "batch2_statistic_correlations.pdf", sep = ""))
pheatmap(cor(data_var[,-length(names(data_var))]), display_numbers = T, fontsize_number = 4)
dev.off()
## Save ----
write.csv(data_var, paste(output_dir, "Karlovich_day2_variation.csv", sep = ""), row.names = T)
## Date: August 25 2024
## Calculate statistics for stability in Karlovich study
## INPUT: Expr and pheno data
## OUTPUT: .csv file of heritability, standard deviation, and variancePartition statistics
### SUMMARY: Blood was drawn from healthy volunteers over 2 weeks and 4 weeks, then at 3 months and 6 months.
# The dataset authors state that the first month of samples and the 3/6 month samples were
# processed in separate batches. We separate the statistics according to day of sampling.
## Load libraries ----
library(AnnotationDbi)
library(limma)
library(oligo)
library(tidyverse)
library(cowplot)
library(GEOquery)
library(variancePartition)
library(heritability)
library(pheatmap)
library(affy)
library(affycoretools)
library(hgu133plus2.db)
## INPUT: .CEL files from GSE16028
input_dir <- "~/Desktop/work_repo/data/"
## OUTPUT: tables and graphics
output_dir <- "~/Desktop/work_repo/github/Karlovich_study_data/output/"
## INPUT: GSE16028 raw data from GEO
input_dir <- "~/Desktop/work_repo/data/"
## OUTPUT: limma results, QC, and graphics
output_dir <- "~/Desktop/work_repo/github/Karlovich_study_data/output/"
# Load in metadata and create batches ----
gset <- getGEO("GSE16028", GSEMatrix =TRUE, AnnotGPL=TRUE)
pheno_data_org <- pData(gset$GSE16028_series_matrix.txt.gz)
# select necessary columns
pheno_data <- pheno_data_org %>%
dplyr::select(title,
geo_accession,
subject = `patient identifier:ch1`,
age = `age (years):ch1`,
sex = `sex:ch1`,
time = `day:ch1`)
head(pheno_data)
#                                              title geo_accession subject age  sex    time
# GSM401059   Blood sample from patient 106 at Day 1     GSM401059     106  40 Male   Day 1
# GSM401060  Blood sample from patient 106 at Day 14     GSM401060     106  40 Male  Day 14
# GSM401061  Blood sample from patient 106 at Day 28     GSM401061     106  40 Male  Day 28
# GSM401062  Blood sample from patient 106 at Day 90     GSM401062     106  40 Male  Day 90
# GSM401063 Blood sample from patient 106 at Day 180     GSM401063     106  40 Male Day 180
# GSM401064   Blood sample from patient 108 at Day 1     GSM401064     108  24 Male   Day 1
p1 <- pheno_data[-grep("Day 90|Day 180", pheno_data$time), ]
dim(p1)
# [1] 66  6
p2 <- pheno_data[grep("Day 90|Day 180", pheno_data$time), ]
dim(p2)
# [1] 43  6
# Analysis of day 1 data ----
files <- list.files(paste(input_dir, "GSE16028_RAW", sep = ""), full.names = T)
files <- files[str_extract(files, "GSM\\d+") %in% p1$geo_accession]
length(files)
# [1] 66
data <- ReadAffy(filenames = files)
data <- affy::rma(data)
norm_expr <- exprs(data)
dim(norm_expr)
# [1] 54675    66
table(p1$sex, p1$subject)
#        106 108 113 114 117 121 123 131 135 138 147 148 154 159 160 163 165 172 173 174 179 180
# Female   0   0   0   0   0   0   0   0   0   0   3   3   3   3   3   3   3   3   3   3   3   3
# Male     3   3   3   3   3   3   3   3   3   3   0   0   0   0   0   0   0   0   0   0   0   0
#        106 108 113 114 117 121 123 131 135 138 147 148 154 159 160 163 165 172 173 174 179 180
# Female   0   0   0   0   0   0   0   0   0   0   3   3   3   3   3   3   3   3   3   3   3   3
# Male     3   3   3   3   3   3   3   3   3   3   0   0   0   0   0   0   0   0   0   0   0   0
## For the RShiny application ----
write.csv(p1, "~/Desktop/work_repo/Box organization/1results/RShiny-application/data/phenotypes/8Karlovich1.csv")
files <- list.files(paste(input_dir, "GSE16028_RAW", sep = ""), full.names = T)
files <- files[str_extract(files, "GSM\\d+") %in% p2$geo_accession]
length(files)
# [1] 43
files <- files[-grep("GSM401157|GSM401087|GSM401148", files)]
length(files)
# [1] 40
data <- ReadAffy(filenames = files)
data <- affy::rma(data)
norm_expr <- exprs(data)
dim(norm_expr)
# [1] 54675    40
colnames(norm_expr) <- gsub(pattern = "(.CEL.gz)", replacement = "", x = colnames(norm_expr)) # greps file extension and replaces it
dim(norm_expr)
df <- data.frame(norm_expr)
p2 <- p2[p2$geo_accession %in% colnames(df), ]
identical(colnames(df), p2$geo_accession)
# [1] TRUE
table(p2$sex, p2$subject)
#        106 108 113 114 117 121 123 131 135 138 147 148 154 159 160 163 165 172 173 179 180
# Female   0   0   0   0   0   0   0   0   0   0   2   2   2   2   2   2   2   1   2   2   2
# Male     2   2   2   2   2   1   2   2   2   2   0   0   0   0   0   0   0   0   0   0   0
## For RShiny application ----
write.csv(p2, "~/Desktop/work_repo/Box organization/1results/RShiny-application/data/phenotypes/8Karlovich2.csv")
session
sessionInfo
sessionInfo()
